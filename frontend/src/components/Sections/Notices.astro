---
import H3 from "../Typography/H3.astro";

const { class: className, ...rest } = Astro.props;
---

<section
    class:list={[
        "flex flex-col gap-4 px-4 py-8 md:py-12 md:px-36 items-center",
        className,
    ]}
    {...rest}
>
    <H3>Tutti gli avvisi</H3>
    <div class="flex gap-7">
        <button
            id="recentEventsButton"
            class="text-white bg-green px-5 py-2 rounded-2xl cursor-pointer"
            type="button">Avvisi recenti</button
        >
        <button
            id="pastEventsButton"
            class="text-blue bg-blue-2 px-5 py-2 rounded-2xl cursor-pointer"
            type="button">Avvisi precedenti</button
        >
    </div>
    <div id="recentNotices" class="grid md:grid-cols-3 gap-10 hidden"></div>
    <div id="pastNotices" class="grid md:grid-cols-3 gap-10 hidden"></div>
</section>

<script>
    function changeEvents(recent: boolean) {
        const activeButtonStyle =
            "bg-green text-white px-5 py-2 rounded-2xl cursor-pointer";
        const inactiveButtonStyle =
            "bg-blue-2 text-blue px-5 py-2 rounded-2xl cursor-pointer";

        const pastEventsButton = document.getElementById(
            "pastEventsButton",
        ) as HTMLButtonElement;
        const recentEventsButton = document.getElementById(
            "recentEventsButton",
        ) as HTMLButtonElement;
        const recentNotices = document.getElementById(
            "recentNotices",
        ) as HTMLDivElement;
        const pastNotices = document.getElementById(
            "pastNotices",
        ) as HTMLDivElement;

        if (recent) {
            pastEventsButton.className = activeButtonStyle;
            recentEventsButton.className = inactiveButtonStyle;
            recentNotices.classList.add("hidden");
            pastNotices.classList.remove("hidden");
        } else {
            pastEventsButton.className = inactiveButtonStyle;
            recentEventsButton.className = activeButtonStyle;
            recentNotices.classList.remove("hidden");
            pastNotices.classList.add("hidden");
        }
    }

    document
        .getElementById("pastEventsButton")
        ?.addEventListener("click", () => {
            changeEvents(true);
        });
    document
        .getElementById("recentEventsButton")
        ?.addEventListener("click", () => {
            changeEvents(false);
        });
    
    
    function createNoticeCard(notice) {
        const template = document.createElement('template');
        template.innerHTML = `
            <notice-card class="flex flex-col gap-4 bg-green rounded-lg px-4 py-5 items-center">
                <h5 class="text-xl md:text-3xl text-white font-display text-center">
                    ${notice.title}
                </h5>
                <p class="text-white font-display">Scritto il ${formatDate(notice.date)}</p>
                <p class="text-white font-display text-center">
                    ${notice.text.length > 100 ? `${notice.text.substring(0, 100)}...` : notice.text}
                </p>
                <button id="openModalButton" class="bg-white text-green px-5 py-2 rounded-2xl cursor-pointer">
                    Leggi tutto
                    <i class="fas fa-arrow-right"></i>
                </button>

                <!-- Modal -->
                <div
                    id="modal"
                    class="fixed w-full h-full top-0 left-0 bg-[rgba(0,0,0,0.5)] z-100 hidden"
                >
                    <div
                        class="flex flex-col gap-5 absolute w-full top-1/2 -translate-y-1/2 left-0 bg-white px-4 py-8 md:px-36 md:py-12"
                    >
                        <button
                            id="closeModalButton"
                            class="absolute top-5 right-5 text-2xl md:text-4xl text-blue cursor-pointer"
                            type="button"
                            aria-label="Chiudi"
                        >
                            <i class="fas fa-times"></i>
                        </button>

                        <h5 class="max-w-5/6 text-3xl md:text-4xl text-blue font-display">
                            ${notice.title}
                        </h5>
                        <div class="flex gap-5 items-center">
                            <i class="fas fa-clock text-blue"></i>
                            <h6 class="text-2xl text-blue font-display">
                                Scritto il ${formatDate(notice.date)}
                            </h6>
                        </div>
                        <p class="md:text-xl text-blue">${notice.text}</p>
                    </div>
                </div>
            </notice-card>
        `;
        return template.content.firstElementChild;
    }

    function formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('it-IT', {
            day: '2-digit',
            month: '2-digit', 
            year: 'numeric'
        });
    }

    let notices = [];
    async function fetchNotices() {
        // Fetch alerts from the PHP endpoint
        const response = await fetch("http://localhost/get.php?what=alerts");
        notices = await response.json();

        renderNotices();
    }

    function renderNotices() {
        const recentNoticesContainer = document.getElementById("recentNotices");
        const pastNoticesContainer = document.getElementById("pastNotices");

        // Split notices into recent (3 latest) and past (all others)
        const recentNotices = notices.slice(0, 3);
        const pastNotices = notices.slice(3);
        
        // Display recent notices
        recentNotices.forEach(notice => {
            const card = createNoticeCard(notice);
            recentNoticesContainer.appendChild(card);
        });
        
        // Display past notices
        pastNotices.forEach(notice => {
            const card = createNoticeCard(notice);
            pastNoticesContainer.appendChild(card);
        });
        
        // Show recent notices by default
        recentNoticesContainer.classList.remove("hidden");
    }

    document.addEventListener("DOMContentLoaded", () => {
        fetchNotices();
    });

    // Initialize the custom element for the notice cards
    if (!customElements.get('notice-card')) {
        class NoticeCard extends HTMLElement {
            connectedCallback() {
                this.querySelector("#openModalButton")?.addEventListener(
                    "click",
                    () => {
                        this.querySelector("#modal")?.classList.remove("hidden");
                    },
                );

                this.querySelector("#closeModalButton")?.addEventListener(
                    "click",
                    () => {
                        this.querySelector("#modal")?.classList.add("hidden");
                    },
                );
            }
        }

        customElements.define("notice-card", NoticeCard);
    }
</script>
